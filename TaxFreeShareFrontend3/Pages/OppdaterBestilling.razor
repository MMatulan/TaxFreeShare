@page "/oppdater-bestilling/{OrderId:int}" 
@using TaxFreeShareFrontend3.Models.DTO
@using TaxFreeShareFrontend3.Services
@inject OrderService OrderService
@inject ProductService ProductService
@inject NavigationManager Navigation

<h3>Oppdater bestilling</h3>

@if (Order == null)
{
    <p>Laster inn bestilling...</p>
}
else
{
    <EditForm Model="OppdaterteOrdrelinjer" OnValidSubmit="OppdaterOrdre">
        <div class="list-group">
            @foreach (var item in OppdaterteOrdrelinjer)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@ProduktNavn.GetValueOrDefault(item.ProductId, $"Produkt #{item.ProductId}")</strong><br />
                        Antall:
                        <InputNumber @bind-Value="item.Quantity" class="form-control d-inline w-auto ms-2" />
                    </div>
                    <button type="button" class="btn btn-danger" @onclick="() => FjernProdukt(item.ProductId)">Fjern</button>
                </div>
            }
        </div>

        <button class="btn btn-primary mt-3" type="submit">Lagre endringer</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(StatusMelding))
    {
        <div class="alert @StatusClass mt-3">@StatusMelding</div>
    }
}

@code {
    [Parameter] public int OrderId { get; set; }
    private OrderDto? Order;
    private List<UpdateOrderItemDto> OppdaterteOrdrelinjer = new();
    private Dictionary<int, string> ProduktNavn = new();

    private string StatusMelding = string.Empty;
    private string StatusClass = "alert-success";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Order = await OrderService.GetOrderByIdAsync(OrderId);
            var produkter = await ProductService.GetProductsAsync();
            ProduktNavn = produkter.ToDictionary(p => p.Id, p => p.Name);

            OppdaterteOrdrelinjer = Order.OrderItems.Select(o => new UpdateOrderItemDto
            {
                ProductId = o.ProductId,
                Quantity = o.Quantity
            }).ToList();
        }
        catch (Exception ex)
        {
            StatusMelding = $"Feil ved lasting av ordre: {ex.Message}";
            StatusClass = "alert-danger";
        }
    }

    private void FjernProdukt(int productId)
    {
        OppdaterteOrdrelinjer.RemoveAll(p => p.ProductId == productId);
    }

    private async Task OppdaterOrdre()
    {
        var dto = new UpdateOrderDto
        {
            OrderItems = OppdaterteOrdrelinjer
                .Where(item => item.Quantity > 0)
                .ToList()
        };

        if (!dto.OrderItems.Any())
        {
            StatusMelding = "Du må ha minst ett produkt i bestillingen.";
            StatusClass = "alert-warning";
            return;
        }

        var success = await OrderService.UpdateOrderAsync(OrderId, dto);

        if (success)
        {
            StatusMelding = "Endringene ble lagret!";
            StatusClass = "alert-success";
        }
        else
        {
            StatusMelding = "Noe gikk galt under lagringen.";
            StatusClass = "alert-danger";
        }
    }
}
