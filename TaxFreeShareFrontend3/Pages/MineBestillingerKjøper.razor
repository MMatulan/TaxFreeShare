@page "/minebestillinger-Kjøper"
@using Blazored.LocalStorage
@using TaxFreeShareFrontend3.Services
@inject ILocalStorageService LocalStorage
@inject OrderService OrderService
@inject NavigationManager Navigation
@inject ProductService ProductService
@using TaxFreeShareFrontend3.Models.DTO



<h3>Mine bestillinger</h3>

@if (Orders == null)
{
<p>Laster inn bestillinger...</p>
}
else if (!Orders.Any())
{
<p>Du har ingen bestillinger ennå.</p>
}
else
{
<ul class="list-group">
    @foreach (var order in Orders)
    {
    <li class="list-group-item">
        <strong>Ordre #@order.Id</strong><br />
        Status: <span class="badge bg-info">@order.Status</span><br />
        Dato: @order.OrderDate.ToLocalTime().ToString("dd.MM.yyyy HH:mm")<br />
        Beløp: <strong>@order.TotalAmount.ToString("F2") kr</strong>

        <ul class="mt-2">
            @foreach (var item in order.OrderItems)
            {
            <li>- @ProduktNavn.GetValueOrDefault(item.ProductId, $"Produkt #{item.ProductId}") (x @item.Quantity)</li>
            }
        </ul>

        <button class="btn btn-sm btn-outline-primary mt-2" @onclick="() => GåTilOppdatering(order.Id)">Oppdater bestilling</button>
    </li>
    }
</ul>
}

@code {
private List<OrderDto> Orders;
private Dictionary<int, string> ProduktNavn = new();


protected override async Task OnInitializedAsync()
{
Orders = await OrderService.GetOrdersForCurrentUserAsync();
var products = await ProductService.GetProductsAsync();


ProduktNavn = products.ToDictionary(p => p.Id, p => p.Name);
}

private void GåTilOppdatering(int orderId)
{
    Navigation.NavigateTo($"/oppdater-bestilling/{orderId}");
}
}
