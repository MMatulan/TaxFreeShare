@page "/dashboardSelger"
@using TaxFreeShareFrontend3.Models.DTO
@using TaxFreeShareFrontend3.Services
@inject OrderService OrderService

<h3>Velkommen, selger</h3>

@if (Orders == null)
{
<p>Laster inn bestillinger...</p>
}
else if (!Orders.Any())
{
<p>Ingen bestillinger å vise.</p>
}
else
{
<ul class="list-group">
    @foreach (var order in Orders.Where(o => o.Status == "Pending"))
    {
    <li class="list-group-item">
        <strong>Bestilling #@order.Id</strong><br />
        Dato: @order.OrderDate.ToLocalTime().ToString("dd.MM.yyyy HH:mm")<br />
        Beløp: @order.TotalAmount.ToString("F2") kr
        <div class="mt-2">
            <button class="btn btn-success btn-sm" @onclick="() => BekreftBestilling(order.Id)">Bekreft</button>
        </div>
    </li>
    }
</ul>
}

@if (!string.IsNullOrEmpty(StatusMessage))
{
<div class="alert alert-success mt-3">@StatusMessage</div>
}

@code {
private List<OrderDto> Orders;
private string StatusMessage;

protected override async Task OnInitializedAsync()
{
Orders = await OrderService.GetOrdersForCurrentUserAsync();
}

private async Task BekreftBestilling(int orderId)
{
    var success = await OrderService.AssignOrderToSellerAsync(orderId);

    if (success)
    {
        var order = Orders.FirstOrDefault(o => o.Id == orderId);
        if (order != null)
        {
            order.Status = "Bekreftet";
            StateHasChanged();
        }
    }
    else
    {
        Console.WriteLine($"Kunne ikke bekrefte bestilling #{orderId}.");
    }
}
}
